global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'
endglobal

###############
# ENVIRONMENT #
###############
snippet beg "begin{} / end{}" bA
\\begin\{$1\}
	${0:${VISUAL}}
\\end\{$1\}
endsnippet
	
snippet lemma "Lemma" b
\\begin\{lemma\}
	${0:${VISUAL}}
\\end\{lemma\}
endsnippet

snippet prop "Proposition" b
\\begin\{proposition\}[$1]
	${0:${VISUAL}}
\\end\{proposition\}
endsnippet

snippet thrm "Theorem" b
\\begin\{theorem\}[$1]
	${0:${VISUAL}}
\\end\{theorem\}
endsnippet

snippet prf "Proof" b
\\begin\{proof\}${1:[$2]}
	${0:${VISUAL}}
\\end\{proof\}
endsnippet

snippet def "Definition" b
\\begin\{definition\}[$1]
	${0:${VISUAL}}
\\end\{definition\}
endsnippet

snippet rmrk "Remark" b
\\begin\{remark*\}[$1]
	${0:${VISUAL}}
\\end\{remark*\}
endsnippet
snippet corl "Corollary" b
\\begin\{corollary\}[$1]
	${0:${VISUAL}}
\\end\{corollary\}
endsnippet

snippet example "Example" b
\\begin\{example\}[$1]
	${0:${VISUAL}}
\\end\{example\}
endsnippet

snippet example* "Example" b
\\begin\{example*\}[$1]
	${0:${VISUAL}}
\\end\{example*\}
endsnippet

snippet enum "enumerate" b
\\begin\{enumerate\}[${1:(i)}]
	\\item ${0:${VISUAL}}
\\end\{enumerate\}
endsnippet

snippet item "itemize" b
\\begin\{itemize\}
	\\item ${0:${VISUAL}}
\\end\{itemize\}
endsnippet

snippet enumi "enumerate i" b
\\begin\{enumerate\}[(i)]
	\\item ${0:${VISUAL}}
\\end\{enumerate\}
endsnippet
	
snippet notion "Notation" b
\\begin\{notation*\}[$1]
	$0${VISUAL}
\\end\{notation*\}
endsnippet

snippet case "cases" b
\\begin\{cases\}
	${0:${VISUAL}}
\\end\{cases\}
endsnippet

########
# MATH #
########

# Math environments

snippet dm "Display Math" Aw
\\[
	${1:${VISUAL}}
.\\]$0
endsnippet

snippet mk "Inline Math" wA 
\$${1:${VISUAL}}\$$0
endsnippet

snippet aligned "Aligned" b
\\[
\\begin\{aligned\}
	${1:${VISUAL}}
\\end\{aligned\}
.\\]$0
endsnippet

snippet align* "Aligned" b
\\begin\{align*\}
	${1:${VISUAL}}
\\end\{align*\}
$0
endsnippet

context "math()"
snippet ds "display style" w
\\displaystyle
endsnippet

# General stuff
context "math()"
snippet fun "function" w
\\colon ${1:\\R} \to ${0:\\C}
endsnippet

context "math()"
snippet lfun "function" w
\\colon ${1:\\R} \longrightarrow ${0:\\C}
endsnippet

context "math()"
snippet binom "binomial coefficient" wA
\\binom\{${1:n}\}\{${2:r}\}$0
endsnippet

context "math()"
snippet cc "subset" wA
\\subset 
endsnippet

context "math()"
snippet nn "cap" w
\\cap 
endsnippet

context "math()"
snippet uu "cup" w
\\cup 
endsnippet

context "math()"
snippet uuu "bigcup" w
\\bigcup_\{${1:i \\in ${2: I}}\} $0
endsnippet

context "math()"
snippet nnn "bigcap" w
\\bigcap_\{${1:i \\in ${2: I}}\} $0
endsnippet

context "math()"
snippet int "integral" w
\\int_\{$1\}^\{$2\}${3:${VISUAL}}d$0
endsnippet

context "math()"
snippet ints "integral over a set" w
\\int_\{$1\}${2:${VISUAL}}d$0
endsnippet

context "math()"
snippet eval "Evaluate primitev" w
\\left[$3\\right]_\{$1\}^\{$2\}$0
endsnippet

# Fractions

context "math()"
snippet // "fraction" iA
\\frac\{$1\}\{$2\}$0
endsnippet

# Superscripts and subscripts

context "math()"
snippet compl "Complement" i
^\{c\}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet td "superscript" Ai
^\{$1\}$0
endsnippet

context "math()"
snippet __ "subscript" Ai
_\{$1\}$0
endsnippet

context "math()"
snippet sqrt "Square Root" w
\\sqrt\{${1:${VISUAL}}\}$0
endsnippet

context "math()"
snippet sqrto "... Root" w
\\sqrt[$1]\{${2:${VISUAL}}\}$0
endsnippet

context "math()"
snippet conj "conjugate" w
\\overline\{$1\}$0
endsnippet

context "math()"
snippet cconj "conjugate" w
^\{*\}
endsnippet

context "math()"
snippet hat "hat" w
\\hat\{${1:${VISUAL}}\}$0
endsnippet

# Style

snippet bf "Bold" w
\\`!p
if math():
	snip.rv = "math"
else:
	snip.rv = "text"
`bf\{${1:${VISUAL}}\}$0
endsnippet

context "not math()"
snippet it "Italic" w
\\textit\{${1:${VISUAL}}\}$0
endsnippet

context "not math()"
snippet un "Underline" w
\\underline\{${1:${VISUAL}}\}$0
endsnippet

context "not math()"
snippet tt "TypeText" w
\\texttt\{${1:${VISUAL}}\}$0
endsnippet

context "math()"
snippet tx "Text" w
\\text\{${1:${VISUAL}}\}$0
endsnippet

context "math()"
snippet cal "Caligraphic Font" w
\\mathcal\{${1:${VISUAL}}\}$0
endsnippet

context "math()"
snippet rm "Right Mode Font" w
\\mathrm\{${1:${VISUAL}}\}$0
endsnippet

context "math()"
snippet bb "Blackboard Bold Font" w
\\mathbb\{${1:${VISUAL}}\}$0
endsnippet

context "env('itemize') or env('enumerate')"
snippet itm "Item" bA
\\item ${0:${VISUAL}}
endsnippet

# Paired delimiters

context "math()"
snippet ceil "Ceil" w
\\left\\lceil${1:${VISUAL}}\\right\\rceil$0
endsnippet

context "math()"
snippet floor "Floor" w
\\left\\lfloor${1:${VISUAL}}\\right\\rfloor$0
endsnippet

context "math()"
snippet pmat "Pmat" w
\\begin\{pmatrix\} $1 \\end\{pmatrix\}$0
endsnippet

context "math()"
snippet bmat "Bmat" w
\\begin\{bmatrix\} $1 \\end\{bmatrix\}$0
endsnippet

context "math()"
snippet () "left( right)" w
\\left(${1:${VISUAL}}\\right)$0
endsnippet

context "math()"
snippet lr "left( right)" w
\\left(${1:${VISUAL}}\\right)$0
endsnippet

context "math()"
snippet lr( "left( right)" w
\\left(${1:${VISUAL}}\\right)$0
endsnippet

context "math()"
snippet lr| "left| right|" w
\\left|${1:${VISUAL}}\\right|$0
endsnippet

context "math()"
snippet abs "absolute value" w
\\left|${1:${VISUAL}}\\right|$0
endsnippet

context "math()"
snippet norm "Norm" w
\\left\\lVert ${1:${VISUAL}} \\right\\rVert$0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" w
\\left\\\{${1:${VISUAL}}\\right\\\}$0
endsnippet

context "math()"
snippet lrb "left\{ right\}" w
\\left\\\{${1:${VISUAL}}\\right\\\}$0
endsnippet

context "math()"
snippet lr[ "left[ right]" w
\\left[${1:${VISUAL}}\\right]$0
endsnippet

context "math()"
snippet lra "leftangle rightangle" w
\\left<${1:${VISUAL}}\\right>$0
endsnippet

context "math()"
snippet |> "right Dirac's notation" w
\\vert $1 \\rangle $0
endsnippet

context "math()"
snippet <| "left Dirac's notation" w
\\langle $1 \\vert $0
endsnippet

context "math()"
snippet <|> "Dirac's dot product" w
\\langle $1 \\mid $2 \\rangle $0
endsnippet

# Calculus

context "math()"
snippet sum "sum" w
\\sum_\{${1:i=1}\}^\{${2:\\infty}\} ${3:a_i}
endsnippet

context "math()"
snippet sums "sum over a set" w
\\sum_\{${1:${2:i} \in ${3:\\N}}\} ${4:a_i}
endsnippet

context "math()"
snippet taylor "taylor" w
\\sum_\{${1:k}=${2:0}\}^\{${3:\\infty}\} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\\lim_\{${1:n} \\to ${2:\\infty}\} 
endsnippet

context "math()"
snippet limsup "limsup" w
\\limsup_\{${1:n} \\to ${2:\\infty}\} 
endsnippet

context "math()"
snippet prod "product" w
\\prod_\{${1:n=${2:1}}\}^\{${3:\\infty}\} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\\frac\{\\partial ${1:VISUAL}\}\{\\partial ${2:x}\} $0
endsnippet

snippet derv "d/dx" w
\\frac\{d$1\}\{d${2:x}\}$0
endsnippet

context "math()"
snippet ooo "infinity" w
\\infty
endsnippet

context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_\{${3:$2}\\in${4:\\N}\}$0
endsnippet

context "math()"
snippet => "Implies" w
\\implies
endsnippet

context "math()"
snippet xx "cross" Aw
\\times 
endsnippet

context "math()"
snippet "(\d|\w)+invs" "inverse" Awr
`!p snip.rv = match.group(1)`^\{-1\}
endsnippet

context "math()"
snippet !> "mapsto" w
\\mapsto 
endsnippet

context "math()"
snippet ... "cdots" i
\\cdots
endsnippet

context "math()"
snippet --> "tends to" w
\\underset\{${1:${2:n} \\to ${3:\\infty}}\}\{\\longrightarrow\}$0
endsnippet

context "math()"
snippet inn "in" Aw
\\in
endsnippet

# Letters (Greek and others)

context "math()"
snippet ll "l" w
\\ell
endsnippet

context "math()"
snippet vphi "varphi" w
\\varphi
endsnippet

context "math()"
snippet veps "varepsilon" w
\\varepsilon
endsnippet

context "math()"
snippet alpha "alpha" w
\\alpha
endsnippet

context "math()"
snippet beta "beta" w
\\beta
endsnippet

context "math()"
snippet gamma "gamma" w
\\gamma
endsnippet

context "math()"
snippet pi "pi" w
\\pi
endsnippet

context "math()"
snippet sigma "sigma" w
\\sigma
endsnippet

# ###########
# # POSTFIX #
# ###########

snippet pac "Package" b
\\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`\{${2:package}\}$0
endsnippet

# #############
# # PRE-AMBLE #
# #############

snippet luatex-template "Basic Article Template For Luatex"
\\documentclass[12pt]\{article\}

\\usepackage[T1]\{fontenc\}

\\usepackage[english]\{babel\}

\\usepackage\{setspace\}
\\setstretch\{1.25\}
\\usepackage[margin=1.2in]\{geometry\}

${1:
\\usepackage\{../../basic-math\}
\\usepackage\{../../visual-tools\}
}

\\newcommand\{\\lect\}[1]\{\\input\{lectures/l#1\}\\flushright\{\\textit\{End of lecture #1.\}\}\}

%To remove indentation
%------------
\\setlength\{\\parindent\}\{0pt\}
%------------

\\usepackage\{hyperref\}
\\hypersetup\{
	colorlinks=true,
	linkcolor=black,
	urlcolor=blue
\}

\\title\{${2:Subject Name}\}
\\author\{${3:knightatthopera}\}
\\date\{${4:\\today}\}

\\begin\{document\}

\\maketitle

\\tableofcontents
\\clearpage

$0

\\end\{document\}
endsnippet

#########
# OTHER #
#########

snippet ni "Non-indented paragraph" bi
\\noindent
endsnippet

############
# SECTIONS #
############

snippet chap "Chapter" b
\\chapter\{$1${VISUAL}\}
endsnippet

snippet sec "Section" b
\\section\{$1${VISUAL}\}
endsnippet

snippet sec* "Section*" b
\\section*\{$1${VISUAL}\}
endsnippet

snippet sub "Subsection" b
\\subsection\{$1${VISUAL}\}
endsnippet

snippet sub* "Subsection*" b
\\subsection*\{$1${VISUAL}\}
endsnippet

snippet subsub "Subsection" b
\\subsubsection\{$1${VISUAL}\}
endsnippet

snippet subsub* "Subsubsection" b
\\subsubsection*\{$1${VISUAL}\}
endsnippet

snippet par "Paragraph" b
\\paragraph\{$1${VISUAL}\}
endsnippet

snippet par* "Paragraph*" b
\\paragraph*\{$1${VISUAL}\}
endsnippet

snippet subpar "Sub Paragraph" b
\\subparagraph\{$1${VISUAL}\}
endsnippet

snippet subpar* "Sub Paragraph*" b
\\subparagraph*\{$1${VISUAL}\}
endsnippet

# vim:ft=snippets:
